install.packages("shiny",dep=T)
library(shiny)
runExample("01 _hello")
runExample("01_hello")
setwd("~/Neo4j/Twitter/omicsGraph")
require(igraph)
install.packages("igraph", dep=T)
require(RNeo4j)
require(igraph)
setwd("~/Neo4j/Twitter/omicsGraph")
graph = startGraph("http://localhost:7475/db/data/")
graph = startGraph("http://localhost:2794/db/data/")
graph = startGraph("http://localhost:2794/db/data/")
graph = startGraph("http://localhost:2794/db/data/")
query = "
MATCH (u1:User)-[:POSTS]->(:Tweet)<-[:TAGS]-(h:Hashtag)-[:TAGS]->(:Tweet)<-[:POSTS]-(u2:User)
WHERE h.name <> 'rstats' AND (ID(u1) < ID(u2))
RETURN u1.screen_name, u2.screen_name, COUNT(*) AS weight
"
data = cypher(graph, query)
g = graph.data.frame(data, directed = F)
g
V(g)$label = NA
V(g)$size = 4
V(g)$color = "cyan"
plot(g)
sort(betweenness(g), decreasing = T)[1:5]
V(g)$size = betweenness(g) / (max(betweenness(g)) * .1)
plot(g)
cluster = edge.betweenness.community(g)$membership
colors = rainbow(max(cluster))
colors = colors[sample(length(colors))]
V(g)$color = colors[cluster]
V(g)$size = 4
plot(g)
query = "
MATCH (h1:Hashtag)-[:TAGS]->(:Tweet)<-[:TAGS]-(h2:Hashtag)
WHERE h1.name <> 'rstats' AND h2.name <> 'rstats' AND (ID(h1) < ID(h2))
RETURN h1.name, h2.name, COUNT(*) AS weight
"
data = cypher(graph, query)
g = graph.data.frame(data, directed = F)
V(g)$label = NA
V(g)$size = 4
V(g)$color = "cyan"
plot(g)
sort(betweenness(g), decreasing = T)[1:5]
query = "
MATCH (h1:Hashtag)-[:TAGS]->(:Tweet)<-[:TAGS]-(h2:Hashtag)
WHERE h1.name <> 'rnaseq' AND h2.name <> 'rnaseq' AND (ID(h1) < ID(h2))
RETURN h1.name, h2.name, COUNT(*) AS weight
"
data = cypher(graph, query)
g = graph.data.frame(data, directed = F)
V(g)$label = NA
V(g)$size = 4
V(g)$color = "cyan"
plot(g)
sort(betweenness(g), decreasing = T)[1:5]
query = "
MATCH (u1:User)-[:POSTS]->(:Tweet)<-[:TAGS]-(h:Hashtag)-[:TAGS]->(:Tweet)<-[:POSTS]-(u2:User)
WHERE h.name <> 'rnaseq' AND h.name <> 'omics' AND h.name <> 'metagenomics' AND (ID(u1) < ID(u2))
RETURN u1.screen_name, u2.screen_name, COUNT(*) AS weight
"
data = cypher(graph, query)
g = graph.data.frame(data, directed = F)
V(g)$label = NA
V(g)$size = 4
V(g)$color = "cyan"
plot(g)
sort(betweenness(g), decreasing = T)[1:5]
V(g)$size = betweenness(g) / (max(betweenness(g)) * .1)
plot(g)
cluster = edge.betweenness.community(g)$membership
colors = rainbow(max(cluster))
colors = colors[sample(length(colors))]
V(g)$color = colors[cluster]
V(g)$size = 4
plot(g)
sort(betweenness(g), decreasing = T)[1:5]
query = "
MATCH (u1:User)-[:POSTS]->(:Tweet)<-[:TAGS]-(h:Hashtag)-[:TAGS]->(:Tweet)<-[:POSTS]-(u2:User)
WHERE h.name <> 'rnaseq' AND h.name <> 'omics' AND h.name <> 'metagenomics' AND (ID(u1) < ID(u2))
RETURN u1.screen_name, u2.screen_name, COUNT(*) AS weight
"
data = cypher(graph, query)
g = graph.data.frame(data, directed = F)
V(g)$label = NA
V(g)$size = 4
V(g)$color = "cyan"
plot(g)
sort(betweenness(g), decreasing = T)[1:5]
V(g)$size = betweenness(g) / (max(betweenness(g)) * .1)
plot(g)
cluster = edge.betweenness.community(g)$membership
colors = rainbow(max(cluster))
colors = colors[sample(length(colors))]
V(g)$color = colors[cluster]
V(g)$size = 4
plot(g)
data
suppressMessages(require(knitr))
kable(head(data),format="rst")
kable(sort(betweenness(g), decreasing = T)[1:5], format="rst")
kable(sort(betweenness(g), decreasing = T)[1:5])
?kable
kable(sort(betweenness(g), decreasing = T)[1:5], format="markdown")
kable(sort(betweenness(g), decreasing = T)[1:5], format="rst")
kable(sort(betweenness(g), decreasing = T)[1:5], format="html")
kable(sort(betweenness(g), decreasing = T)[1:5], format="latex")
data = cypher(graph, query)
kable(head(data),format="rst")
library(printr)
install.packages('printr', dep=T)
